import logging
from telegram import Update, ForceReply, Voice
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime
import json
import os
import whisper
import tempfile
import subprocess

TOKEN = os.getenv("TOKEN", "7624473465:AAFQ6BhxcrdYm62y43RYj0KQZQ87KStXSF0")
ALLOWED_CHAT_ID = int(os.getenv("CHAT_ID", "-4644207460"))

# –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î –∏–ª–∏ Google Sheets)
data = {
    "tasks": [],
    "reminders": [],
    "lists": {},
    "budget": []
}

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

model = whisper.load_model("base")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç ‚Äî –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ö–∞—Ç–µ—Ä–∏–Ω–∞ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ú–∞—Ä–∫–∞.")
        return
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, —è –ö–∞—Ç–µ—Ä–∏–Ω–∞ ü§ç
–ü–∏—à–∏ –∏–ª–∏ –≥–æ–≤–æ—Ä–∏ –∑–∞–¥–∞—á–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –ø–æ–∫—É–ø–∫–∏ ‚Äî —è –≤—Å—ë –∑–∞–ø–æ–º–Ω—é."
    )

async def process_text_command(update: Update, text: str):
    text = text.lower()
    if text.startswith("–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É"):
        task = text.replace("–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É", "").strip()
        data["tasks"].append({"task": task, "created": datetime.now().isoformat()})
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task}")

    elif text.startswith("—Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"):
        items = data["lists"].get("–ø–æ–∫—É–ø–∫–∏", [])
        response = "\n".join(f"- {item}" for item in items) if items else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
        await update.message.reply_text(f"üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:
{response}")

    elif text.startswith("–¥–æ–±–∞–≤—å –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"):
        item = text.replace("–¥–æ–±–∞–≤—å –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫", "").strip()
        data["lists"].setdefault("–ø–æ–∫—É–ø–∫–∏", []).append(item)
        await update.message.reply_text(f"–î–æ–±–∞–≤–∏–ª–∞ –≤ —Å–ø–∏—Å–æ–∫: {item}")

    elif text.startswith("–ø–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏"):
        tasks = data["tasks"]
        response = "\n".join(f"‚Ä¢ {t['task']}" for t in tasks) if tasks else "–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç"
        await update.message.reply_text(f"üìã –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:
{response}")

    elif text.startswith("–∑–∞–ø–∏—à–∏ —Ä–∞—Å—Ö–æ–¥"):
        parts = text.replace("–∑–∞–ø–∏—à–∏ —Ä–∞—Å—Ö–æ–¥", "").strip().split(" –Ω–∞ ")
        if len(parts) == 2:
            amount, category = parts
            try:
                data["budget"].append({"amount": float(amount), "category": category, "date": datetime.now().isoformat()})
                await update.message.reply_text(f"–ó–∞–ø–∏—Å–∞–ª–∞ {amount} —Ä—É–± –Ω–∞ {category}")
            except ValueError:
                await update.message.reply_text("–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —Å—É–º–º—É")
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –∑–∞–ø–∏—à–∏ —Ä–∞—Å—Ö–æ–¥ 500 –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã")

    else:
        await update.message.reply_text("–ù–µ —É–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ –ø–æ–Ω—è–ª–∞. –ü–æ–ø—Ä–æ–±—É–π: '–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É', '—Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', '–∑–∞–ø–∏—à–∏ —Ä–∞—Å—Ö–æ–¥'‚Ä¶")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    text = update.message.text
    await process_text_command(update, text)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return

    file = await context.bot.get_file(update.message.voice.file_id)
    with tempfile.TemporaryDirectory() as tmpdir:
        ogg_path = os.path.join(tmpdir, "audio.ogg")
        wav_path = os.path.join(tmpdir, "audio.wav")

        await file.download_to_drive(ogg_path)
        subprocess.run(["ffmpeg", "-i", ogg_path, wav_path], capture_output=True)

        result = model.transcribe(wav_path, language="ru")
        text = result["text"].strip()

        await update.message.reply_text(f"üé§ –¢—ã —Å–∫–∞–∑–∞–ª: {text}")
        await process_text_command(update, text)

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    print("–ö–∞—Ç–µ—Ä–∏–Ω–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞")
    app.run_polling()
